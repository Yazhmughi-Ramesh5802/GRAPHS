//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            int[][] grid = new int[n][m];
            for(int i = 0; i < n; i++){
                String[] S = br.readLine().trim().split(" ");
                for(int j = 0; j < m; j++){
                    grid[i][j] = Integer.parseInt(S[j]);
                }
            }
            Solution obj = new Solution();
            int ans = obj.orangesRotting(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends

class Pair{
    int row,col,tm;
    Pair(int _row,int _col,int _tm){
        row=_row;
        col=_col;
        tm=_tm;
    }
}
class Solution
{
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {   
        int m = grid.length;
        int n = grid[0].length;
        int cntFresh=0;
        Queue <Pair> q = new LinkedList<>();
        int[][] visited = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    Pair p = new Pair(i,j,0);
                    q.add(p);
                    visited[i][j]=2;
                }
                else if(grid[i][j]==1) {cntFresh+=1; visited[i][j]=0;}
                else if(grid[i][j]==0) visited[i][j]=0;
            }
        }
        int[] drow = {-1,1,0,0};
        int[] dcol = {0,0,-1,1};
        int time = 0;
        int cnt=0;
        while(!q.isEmpty()){
            int r = q.peek().row;
            int c = q.peek().col;
            int t = q.peek().tm;
            q.remove();
            time = Math.max(time,t);
            for(int k=0;k<4;k++){
                int newRow = r+drow[k];
                int newCol = c+dcol[k];
                if(newRow>=0 && newRow<m && newCol>=0 && newCol<n && visited[newRow][newCol]==0 && grid[newRow][newCol]==1){
                    cnt++;
                    visited[newRow][newCol]=2;
                    Pair p = new Pair(newRow,newCol,t+1);
                    q.add(p);
                }
            }
        }
        if(cnt!=cntFresh) return -1;
        else return time;
    }
}
