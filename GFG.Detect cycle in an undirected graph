//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            for (int i = 0; i < V; i++) adj.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }
            Solution obj = new Solution();
            boolean ans = obj.isCycle(V, adj);
            if (ans)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}
// } Driver Code Ends


class Pair{
    int first,second;
    Pair(int first,int second){
        this.first = first;
        this.second = second;
    }
}
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean check(int s,ArrayList<ArrayList<Integer>> adj,int[] visited){
        Pair pr = new Pair(s,-1);
        Queue <Pair> q = new LinkedList<>();
        q.add(pr);
        visited[s]=1;
        
        while(!q.isEmpty()){
            int f = q.peek().first;
            int l = q.peek().second;
            q.remove();
            for(int i=0;i<adj.get(f).size();i++){
                if(visited[adj.get(f).get(i)]==0){
                    Pair temp = new Pair(adj.get(f).get(i),f);
                    q.add(temp);
                    visited[adj.get(f).get(i)]=1;
                }
                else if(l != adj.get(f).get(i)) return true;
            }
        }
        return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        int[] visited = new int[V];
        //int[] parent = new int[V];
        //Arrays.fill(parent,-1);
        
        for(int i=0;i<V;i++){
            if(visited[i]==0){
                if(check(i,adj,visited)) return true;
            }
            
        }
        return false;
    }
}
