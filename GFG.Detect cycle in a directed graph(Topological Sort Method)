//{ Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for (int i = 0; i < V; i++)
                list.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if (new Solution().isCyclic(V, list) == true)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}
// } Driver Code Ends


/*Complete the function below*/

class Solution {

    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        int[] ans = new int[V];
        int[] inDeg = new int[V];
        for(int i=0;i<adj.size();i++){
            for(int j=0;j<adj.get(i).size();j++){
                int num = adj.get(i).get(j);
                inDeg[num]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<inDeg.length;i++){
            if(inDeg[i]==0) q.add(i);
        }
        int j=0;
        while(!q.isEmpty()){
            int n = q.peek();
            q.remove();
            ans[j++]=n;
            
            for(int i=0;i<adj.get(n).size();i++){
                int temp = adj.get(n).get(i);
                inDeg[temp]--;
                if(inDeg[temp]==0) q.add(temp);
            }
        }
        if(j==V) return false;
        else return true;
    }
}
