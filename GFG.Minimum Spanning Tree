//{ Driver Code Starts


import java.util.*;
import java.io.*;
import java.lang.*;

public class Main{
	static BufferedReader br;
	static PrintWriter ot;
    public static void main(String args[]) throws IOException {
		br = new BufferedReader(new InputStreamReader(System.in));
		ot = new PrintWriter(System.out);
		int t = Integer.parseInt(br.readLine().trim());
		while(t-- > 0){
			String s[] = br.readLine().trim().split(" ");
			int V = Integer.parseInt(s[0]);
			int E = Integer.parseInt(s[1]);
			int edges[][] = new int[E][3];
			for(int i = 0; i < E; i++){
				s = br.readLine().trim().split(" ");
				edges[i][0] = Integer.parseInt(s[0]);
				edges[i][1] = Integer.parseInt(s[1]);
				edges[i][2] = Integer.parseInt(s[2]);
			}
			ot.println(new Solution().spanningTree(V, E, edges));
		}
		ot.close();
	}
}
// } Driver Code Ends


// User function Template for Java
class Pair{
    int node,distance;
    Pair(int distance,int node){
        this.distance = distance;
        this.node = node;
    }
}
class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	    
	    // step 1 : Initialize priority queue, visited array and sum
	    
	    PriorityQueue<Pair> pq = new PriorityQueue<Pair>((x,y) -> x.distance - y.distance);
	    pq.add(new Pair(0,0));
	    int sum = 0;
	    int[] visited = new int[V];
	    // step 2 : create adjacency list
	    ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<>();
	    ArrayList<Integer> temp1 = new ArrayList<>();
	    ArrayList<Integer> temp2 = new ArrayList<>();

	    
	    for(int i=0;i<V;i++) adj.add(new ArrayList<>());
	    for(int i=0;i<edges.length;i++){
	        int u = edges[i][0];
	        int v = edges[i][1];
	        int wt = edges[i][2];
	        
	        temp1 = new ArrayList<>();
	        temp2 = new ArrayList<>();
	        
	        temp1.add(v);
	        temp1.add(wt);
	        
	        temp2.add(u);
	        temp2.add(wt);
	        
	        adj.get(u).add(temp1);
	        adj.get(v).add(temp2);
	       
	        
	    }
	   // System.out.println(adj);
	    
	   while(!pq.isEmpty()){
	        int currNode = pq.peek().node;
	        int dist = pq.peek().distance;
	        pq.remove();
	        
	        if(visited[currNode]!=1){
	            sum+=dist;
	            visited[currNode]=1;
	        }
	        else continue;
	        
	        for(int i=0;i<adj.get(currNode).size();i++){
	            int newNode = adj.get(currNode).get(i).get(0);
	            int newDist = adj.get(currNode).get(i).get(1);
	            if(visited[newNode]!=1){
	                pq.add(new Pair(newDist,newNode));
	            }
	        }
	        
	    }
	    return sum;
	}
}
