//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
	public static void main(String args[]) throws IOException
	{
	    Scanner sc = new Scanner(System.in);
	    int t = sc.nextInt();
		while(t>0)
		{
		    int N = sc.nextInt();
		    int P = sc.nextInt();
		    int prerequisites[][] = new int[P][2];
		    for(int i=0;i<P;i++)
		    {
		        for(int j=0;j<2;j++)
		        {
		            prerequisites[i][j] = sc.nextInt();
		        }
		    }
			Solution ob = new Solution();
			if(ob.isPossible(N,prerequisites))
			{
			    System.out.println("Yes");
			}
			else{
			    System.out.println("No");
			}
			t--;
		}
	}
	
}

// } Driver Code Ends


//User function Template for Java

class Solution {
    public boolean isPossible(int N, int[][] prerequisites)
    {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<=N;i++){
            adj.add(new ArrayList<>());
        }
        int[] inDeg = new int[N];
        for(int i=0;i<prerequisites.length;i++){
            int a = prerequisites[i][0];
            int b = prerequisites[i][1];
            adj.get(a).add(b);
            inDeg[b]++;
        }
        //System.out.println(adj);
        int[] ans = new int[N];
        Queue <Integer> q = new LinkedList<>();
        for(int i=0;i<inDeg.length;i++){
            if(inDeg[i]==0) q.add(i);
        }
        
        int j=0;
        while(!q.isEmpty()){
            int node = q.peek();
            q.remove();
            ans[j++]=node;
            for(int i=0;i<adj.get(node).size();i++){
                int temp = adj.get(node).get(i);
                inDeg[temp]--;
                if(inDeg[temp]==0) q.add(temp);
            }
        }
        if(j==N) return true;
        else return false;
        
       
    }
    
}
