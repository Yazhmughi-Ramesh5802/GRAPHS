//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            char[][] grid = new char[n][m];
            for (int i = 0; i < n; i++) {
                String[] S = br.readLine().trim().split(" ");
                for (int j = 0; j < m; j++) {
                    grid[i][j] = S[j].charAt(0);
                }
            }
            Solution obj = new Solution();
            int ans = obj.numIslands(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends

class Pair{
    int first,second;
    Pair(int first,int second){
        this.first = first;
        this.second = second;
    }
}

class Solution {
    public void Bfs(int[][] visited,char[][] grid,int f,int s){
        int m = grid.length;
        int n = grid[0].length;
        visited[f][s]=1;
        Queue <Pair> q = new LinkedList<>();
        Pair p = new Pair(f,s);
        q.add(p);
        
        while(!q.isEmpty()){
            int row = q.peek().first;
            int col = q.peek().second;
            q.remove();
            for(int dRow = -1;dRow <= 1;dRow++){
                for(int dCol = -1;dCol <= 1;dCol++){
                    int newRow = row + dRow;
                    int newCol = col + dCol;
                    if(newRow>=0 && newRow<m && newCol>=0 && newCol<n && visited[newRow][newCol]==0 && grid[newRow][newCol]=='1'){
                        Pair temp = new Pair(newRow,newCol);
                        q.add(temp);
                        visited[newRow][newCol]=1;
                    } 
                    
                }
            }
        }
    }
    // Function to find the number of islands.
    public int numIslands(char[][] grid) {
        int cnt=0;
        int a = grid.length;
        int b = grid[0].length;
        int[][] visited = new int[a][b];
        for(int i=0;i<a;i++){
            for(int j=0;j<b;j++){
                if(visited[i][j]==0 && grid[i][j]=='1') {
                    Bfs(visited,grid,i,j);
                    cnt++;
                }
            }
        }
        return cnt;
    }
}
