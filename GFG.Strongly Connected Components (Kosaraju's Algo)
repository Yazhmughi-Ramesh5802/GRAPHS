//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Gfg
{
    public static void main (String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            // arraylist of arraylist to represent graph
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            
            int V = Integer.parseInt(sc.next());
            int E = Integer.parseInt(sc.next());
            
            for(int i =0; i < V; i++)
                adj.add(i, new ArrayList<Integer>());
                
            for(int i = 1; i <= E; i++)
            {    int u = Integer.parseInt(sc.next());
                 int v = Integer.parseInt(sc.next());
                 
                 // adding directed edgese between 
                 // vertex 'u' and 'v'
                 adj.get(u).add(v);
            }
            
            Solution ob = new Solution();
            System.out.println(ob.kosaraju(V, adj));
		}
    }
}

// } Driver Code Ends


//User function Template for Java


class Solution
{
    public void dfs(int node,ArrayList<ArrayList<Integer>> adj,Stack<Integer> stk,
    int[] visited){
        visited[node]=1;
        
        for(Integer it : adj.get(node)){
            if(visited[it]==0){
                dfs(it,adj,stk,visited);
            }
        }
        
        
        stk.push(node);
    }
    public void dfsN(int node,int[] visited,ArrayList<ArrayList<Integer>> adjT){
        visited[node]=1;
        for(Integer it : adjT.get(node)){
            if(visited[it] == 0){
                dfsN(it,visited,adjT);
            }
        }
    }
    //Function to find number of strongly connected components in the graph.
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
    {
        // create visited array
        int[] visited = new int[V];
        Stack<Integer> stk = new Stack<>();
        for(int i=0;i<V;i++){
            if(visited[i]==0) dfs(i,adj,stk,visited);
        }
        
        ArrayList<ArrayList<Integer>> adjT = new ArrayList<>();
        for(int i=0;i<V;i++){
            adjT.add(new ArrayList<Integer>());
        }
        
        // we reverse the graph here
        for(int i=0;i<V;i++){
            visited[i]=0;
            for(int j=0;j<adj.get(i).size();j++){
                adjT.get(adj.get(i).get(j)).add(i);
            }
        }
        
        int scc = 0;
        while(!stk.isEmpty()){
            int node = stk.peek();
            stk.pop();
            if(visited[node]==0){
                scc++;
                dfsN(node,visited,adjT);
            }
        }
        return scc;
    }
}
