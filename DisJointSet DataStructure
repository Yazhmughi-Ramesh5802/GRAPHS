/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/

import java.util.*;
import java.io.*;

class DisJointSet{
    List<Integer> rank = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    // Initializing the basic elements using constructor
    public DisJointSet(int n){
        for(int i=0;i<=n;i++){
            rank.add(0);
            parent.add(i);
            size.add(1);
        }
    }
    
    public int findUpar(int node){
        if(node==parent.get(node)) return node;
        // otherwise
        int ulp = findUpar(parent.get(node));
        parent.set(node,ulp);
        return parent.get(node);
        // or return ulp;
    }
    
    public void unionByRank(int u,int v){
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        
        if(ulp_u==ulp_v) return;
        
        if(rank.get(ulp_u) < rank.get(ulp_v)){
            parent.set(ulp_u,ulp_v);
        }
        else if(rank.get(ulp_u) > rank.get(ulp_v)){
            parent.set(ulp_v,ulp_u);
        }
        else{
            parent.set(ulp_v,ulp_u);
            int rankU=rank.get(ulp_u);
            rank.set(ulp_u,rankU+1);
        }
    }
    
    public void unionBySize(int u,int v){
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        
        if(ulp_u == ulp_v) return;
        if(size.get(ulp_u) < size.get(ulp_v)){
            parent.set(ulp_u,ulp_v);
            size.set(ulp_v,size.get(ulp_v)+size.get(ulp_u));
        }
        else{
            parent.set(ulp_v,ulp_u);
            size.set(ulp_v,size.get(ulp_u)+size.get(ulp_v));
            
        }
    }
}

public class Main
{
	public static void main(String[] args) {
	    
	    DisJointSet ds = new DisJointSet(7);
	    ds.unionByRank(1,2);
	    ds.unionByRank(2,3);
	    ds.unionByRank(4,5);
	    ds.unionByRank(6,7);
	    ds.unionByRank(5,6);
	    
	    // to check if 3 and 7 belongs to same component
		if(ds.findUpar(3) == ds.findUpar(7)) System.out.println("Same");
	    else System.out.println("Not Same");
	    
	    ds.unionByRank(3,7);
	    if(ds.findUpar(3) == ds.findUpar(7)) System.out.println("Same");
	    else System.out.println("Not Same");
	}
}
